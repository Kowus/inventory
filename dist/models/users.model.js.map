{"version":3,"sources":["../../models/users.model.js"],"names":["mongoose","require","securePassword","pwd","userSchema","Schema","email","type","String","required","unique","firstname","lastname","password","Buffer","profile_photo","username","pre","next","user","isModified","isNew","userPassword","from","hash","err","verify","result","INVALID_UNRECOGNIZED_HASH","console","error","INVALID","log","VALID","VALID_NEEDS_REHASH","improvedHash","methods","validPassword","verifySync","module","exports","model"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAIC,iBAAiBD,QAAQ,iBAAR,CAArB;AACAE,MAAMD,gBAAN;AACA,IAAIE,aAAa,IAAIJ,SAASK,MAAb,CAAoB;AACjCC,WAAO,EAACC,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EAA+BC,QAAQ,IAAvC,EAD0B;AAEjCC,eAAWH,MAFsB;AAGjCI,cAAUJ,MAHuB;AAIjCK,cAAU,EAACN,MAAMO,MAAP,EAAeL,UAAU,IAAzB,EAJuB;AAKjCM,mBAAeP,MALkB;AAMjCQ,cAAS,EAACT,MAAKC,MAAN,EAAcC,UAAS,IAAvB,EAA6BC,QAAO,IAApC;;AANwB,CAApB,CAAjB;;AAWAN,WAAWa,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACnC,QAAIC,OAAO,IAAX;AACA,QAAI,KAAKC,UAAL,CAAgB,qBAAhB,KAA0C,KAAKC,KAAnD,EAA0D;AACtD,YAAIC,eAAeR,OAAOS,IAAP,CAAYJ,KAAKN,QAAjB,CAAnB;AACAV,YAAIqB,IAAJ,CAASF,YAAT,EAAuB,UAAUG,GAAV,EAAeD,IAAf,EAAqB;AACxC,gBAAIC,GAAJ,EAAS,OAAOP,KAAKO,GAAL,CAAP;;AAET;AACAtB,gBAAIuB,MAAJ,CAAWJ,YAAX,EAAyBE,IAAzB,EAA+B,UAAUC,GAAV,EAAeE,MAAf,EAAuB;AAClD,oBAAIF,GAAJ,EAAS,OAAOP,KAAKO,GAAL,CAAP;;AAET,oBAAIE,WAAWzB,eAAe0B,yBAA9B,EAAyD,OAAOC,QAAQC,KAAR,CAAc,uEAAd,CAAP;AACzD,oBAAIH,WAAWzB,eAAe6B,OAA9B,EAAuC,OAAOF,QAAQG,GAAR,CAAY,oBAAZ,CAAP;AACvC,oBAAIL,WAAWzB,eAAe+B,KAA9B,EAAqC;AACjCd,yBAAKN,QAAL,GAAgBW,IAAhB;AACAN;AACH;AACD,oBAAIS,WAAWzB,eAAegC,kBAA9B,EAAkD;AAC9CL,4BAAQG,GAAR,CAAY,qDAAZ;;AAEA7B,wBAAIqB,IAAJ,CAASF,YAAT,EAAuB,UAAUG,GAAV,EAAeU,YAAf,EAA6B;AAChD,4BAAIV,GAAJ,EAASI,QAAQC,KAAR,CAAc,8EAAd;AACTX,6BAAKN,QAAL,GAAgBsB,YAAhB;AACAjB;AACH,qBAJD;AAKH;AACJ,aAlBD;AAmBH,SAvBD;AAwBH,KA1BD,MA0BO,OAAOA,MAAP;AACV,CA7BD;;AAgCAd,WAAWgC,OAAX,CAAmBC,aAAnB,GAAmC,UAAUxB,QAAV,EAAoB;AACnD,WAAOV,IAAImC,UAAJ,CAAexB,OAAOS,IAAP,CAAYV,QAAZ,CAAf,EAAsC,KAAKA,QAA3C,CAAP;AACH,CAFD;;AAKA0B,OAAOC,OAAP,GAAiBxC,SAASyC,KAAT,CAAe,MAAf,EAAuBrC,UAAvB,CAAjB","file":"users.model.js","sourcesContent":["const mongoose = require('mongoose');\nlet securePassword = require('secure-password');\npwd = securePassword();\nlet userSchema = new mongoose.Schema({\n    email: {type: String, required: true, unique: true},\n    firstname: String,\n    lastname: String,\n    password: {type: Buffer, required: true},\n    profile_photo: String,\n    username:{type:String, required:true, unique:true}\n\n});\n\n\nuserSchema.pre('save', function (next) {\n    let user = this;\n    if (this.isModified('auth.local.password') || this.isNew) {\n        let userPassword = Buffer.from(user.password);\n        pwd.hash(userPassword, function (err, hash) {\n            if (err) return next(err);\n\n            // Save hash somewhere\n            pwd.verify(userPassword, hash, function (err, result) {\n                if (err) return next(err);\n\n                if (result === securePassword.INVALID_UNRECOGNIZED_HASH) return console.error('This hash was not made with secure-password. Attempt legacy algorithm');\n                if (result === securePassword.INVALID) return console.log('Imma call the cops');\n                if (result === securePassword.VALID) {\n                    user.password = hash;\n                    next();\n                }\n                if (result === securePassword.VALID_NEEDS_REHASH) {\n                    console.log('Yay you made it, wait for us to improve your safety');\n\n                    pwd.hash(userPassword, function (err, improvedHash) {\n                        if (err) console.error('You are authenticated, but we could not improve your safety this time around');\n                        user.password = improvedHash;\n                        next();\n                    });\n                }\n            });\n        });\n    } else return next();\n});\n\n\nuserSchema.methods.validPassword = function (password) {\n    return pwd.verifySync(Buffer.from(password), this.password);\n};\n\n\nmodule.exports = mongoose.model('User', userSchema);"]}