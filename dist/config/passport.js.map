{"version":3,"sources":["../../config/passport.js"],"names":["LocalStrategy","require","Strategy","User","module","exports","passport","serializeUser","req","user","done","id","deserializeUser","findById","err","use","usernameField","passwordField","passReqToCallback","email","password","process","nextTick","regex","RegExp","findOne","$or","flash","newUser","trim","toLowerCase","body","firstname","lastname","username","save","validPassword"],"mappings":"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","file":"passport.js","sourcesContent":["const LocalStrategy = require('passport-local').Strategy;\nlet User = require('../models/users.model');\n\nmodule.exports = function (passport) {\n    // Serialize User\n    passport.serializeUser(function (req, user, done) {\n        done(null, user.id);\n    });\n    //\tDeserialize User\n    passport.deserializeUser(function (req, id, done) {\n        User.findById(id, function (err, user) {\n            done(err, user);\n        });\n    });\n\n\n    passport.use('local-signup', new LocalStrategy({\n            // by default, local strategy uses username and password, we will override with email\n            usernameField: 'email',\n            passwordField: 'password',\n            passReqToCallback: true // allows us to pass back the entire request to the callback\n        },\n        function (req, email, password, done) {\n            // async. User.findOne() won't fire until data is sent back\n            process.nextTick(function () {\n                //\tCheck to see if there's already a record of user\n                let regex = new RegExp(email, 'i');\n                User.findOne({\n                    $or:[\n                        {'email': regex},\n                        {'username':regex}\n                    ]\n                }, function (err, user) {\n                    if (err) return done(err);\n                    if (user) {\n                        return done(null, false, req.flash('signupMessage', 'That email has already been used with an account.'))\n                    } else {\n                        //\tUser doesn't already exist\n                        //\tCreate User\n                        let newUser = new User();\n\n                        //\tset User's local credentials\n                        newUser.email = email.trim().toLowerCase();\n                        newUser.password = req.body.password;\n                        newUser.firstname = req.body.firstname;\n                        newUser.lastname = req.body.lastname;\n                        newUser.username = req.body.username.trim();\n\n                        newUser.save(function (err) {\n                            if (err) throw err;\n                            return done(null, newUser);\n                        });\n                    }\n                });\n            });\n        }\n    ));\n\n\n    passport.use('local-login', new LocalStrategy({\n            usernameField: 'email',\n            passwordField: 'password',\n            passReqToCallback: true\n        },\n        function (req, email, password, done) {\n            //\tIf user exists\n            let regex = new RegExp(email, 'i');\n            User.findOne({\n            $or:[\n                {'email': regex},\n                {'username':regex}\n            ]\n            }, function (err, user) {\n                if (err) return done(err);\n                //\tIf user doesn't exist\n                if (!user) return done(null, false, req.flash('loginMessage', 'No user found'));\n\n                //\tIf user found but password is wrong\n                if (!user.validPassword(password)) return done(null, false, req.flash('loginMessage', 'Email or Password incorrect'));\n                return done(null, user);\n            });\n        }\n    ));\n};"]}